@using Fima.Common
@model Fima.Web.Areas.FrontOffice.Models.Client.ClientRegisterViewModel
@{
    ViewBag.Title = "Клиенти";
}
<h2>Регистриране на клиент</h2>
<a class="pure-button button-right" href="@Url.Action("Index","Home", new { area = "BackOffice" })"><i class="fa fa-chevron-left"></i> бек офис</a>
<hr />
@using (Html.BeginForm("Register", "Client", FormMethod.Post, new { @class = "pure-form", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="pure-g">
        <div class="pure-u-1 pure-u-lg-1-3">
            <div class="top-form pure-form-stacked">
                <div class="pure-u-1">
                    @Html.LabelFor(m => m.PERSONALID_BULSTAT)
                    @Html.TextBoxFor(m => m.PERSONALID_BULSTAT, new { @class = "pure-u-23-24", id = "id-bulstat" })
                    @Html.ValidationMessageFor(x => x.PERSONALID_BULSTAT)
                </div>
                <div class="pure-u-1">
                    @Html.LabelFor(m => m.TYPE_PERSON)
                    @Html.DropDownListFor(
                        m => m.TYPE_PERSON,
                        new SelectList(GlobalConstants.PerTypes),
                        new { @class = "pure-u-23-24", id = "type-person" })
                    @Html.ValidationMessageFor(x => x.TYPE_PERSON)
                </div>
                <div class="pure-u-1">
                    @Html.LabelFor(m => m.CONTRACT_TYPE)
                    @Html.DropDownListFor(
                        m => m.CONTRACT_TYPE,
                        new SelectList(GlobalConstants.ContractType),
                        new { @class = "pure-u-23-24" })
                    @Html.ValidationMessageFor(x => x.CONTRACT_TYPE)
                </div>
                <div class="pure-u-1">
                    <label for="reg-cd">регистрация Ц.Д.</label>
                    @Html.DropDownList(
                        "reg-cd",
                        new SelectList(new string[] { "да", "не" }),
                        new { @class = "pure-u-23-24" })
                </div>
            </div>
            <br />
            <div class="top-form pure-controls">
                <input type="submit" class="pure-button pure-button-primary" id="reg-client" value="регистрирай" />
            </div>
            <br />

            <div class="pure-u-1 text-danger" id="client-exists">

            </div>
            <div class="pure-u-1 text-success" id="client-notfound">

            </div>
        </div>
        <div class="pure-u-1 pure-u-lg-2-3">
            <div id="accordion">
                <b>данни за физическо лице</b>
                <div class="pure-form-stacked">
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">Име на клиента</h3>
                        </div>

                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.FIRSTNAME)
                            @Html.TextBoxFor(m => m.FIRSTNAME, new { @class = "pure-u-23-24" })
                            @Html.ValidationMessageFor(x => x.FIRSTNAME)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.SECONDNAME)
                            @Html.TextBoxFor(m => m.SECONDNAME, new { @class = "pure-u-23-24" })
                            @Html.ValidationMessageFor(x => x.SECONDNAME)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.LASTNAME)
                            @Html.TextBoxFor(m => m.LASTNAME, new { @class = "pure-u-23-24" })
                            @Html.ValidationMessageFor(x => x.LASTNAME)
                        </div>
                    </div>
                    <br />
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">Документ за самоличност</h3>
                        </div>

                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.PERSONAL_ID)
                            @Html.TextBoxFor(m => m.PERSONAL_ID, new { @class = "pure-u-23-24" })
                            @Html.ValidationMessageFor(x => x.PERSONAL_ID)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.PERSONAL_ID_DATE)
                            @Html.TextBoxFor(m => m.PERSONAL_ID_DATE, new { @class = "pure-u-23-24 datepicker" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.PERSONAL_ID_ISSUED_BY)
                            @Html.TextBoxFor(m => m.PERSONAL_ID_ISSUED_BY, new { @class = "pure-u-23-24" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.CLIENT_BIRTHDATE)
                            @Html.TextBoxFor(m => m.CLIENT_BIRTHDATE, new { @class = "pure-u-23-24 datepicker" })
                        </div>
                    </div>
                </div>
                <h3>данни за юридическо лице</h3>
                <div class="pure-form-stacked">
                    <div class="pure-u-1 pure-u-md-1-2">
                        @Html.LabelFor(m => m.FirmName)
                        @Html.TextBoxFor(m => m.FirmName, new { @class = "pure-u-23-24" })
                    </div>
                    <div class="pure-u-1 pure-u-md-1-2">
                        @Html.LabelFor(m => m.ID_NUMBER_TAX_ID)
                        @Html.TextBoxFor(m => m.ID_NUMBER_TAX_ID, new { @class = "pure-u-23-24" })
                    </div>
                    <div class="pure-u-1 pure-u-md-1-2">
                        @Html.LabelFor(m => m.DDS_REGISTERED)
                        @Html.DropDownListFor(
                            m => m.DDS_REGISTERED,
                            new SelectList(new string[] { "да", "не" }),
                            new { @class = "pure-u-23-24" })
                    </div>
                    <div class="pure-u-1 pure-u-md-1-2">
                        @Html.LabelFor(m => m.TYPE_ORGANIZATION)
                        @Html.DropDownListFor(
                            m => m.TYPE_ORGANIZATION,
                            new SelectList(GlobalConstants.OrganisationType),
                            new { @class = "pure-u-23-24" })
                    </div>
                </div>
                <h3>адрес</h3>
                <div class="pure-form-stacked">
                    <div class="pure-g">
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.COUNTRY_ADDRESS_ID)
                            @Html.DropDownListFor(
                            m => m.COUNTRY_ADDRESS_ID,
                            new SelectList(Model.Countries),
                            new { @class = "pure-u-23-24" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.TOWN_ADDRESS_ID)
                            @Html.DropDownListFor(
                            m => m.TOWN_ADDRESS_ID,
                            new SelectList(Model.Cities),
                            new { @class = "pure-u-23-24" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.MUNICIPALITY)
                            @Html.DropDownListFor(
                            m => m.MUNICIPALITY,
                            new SelectList(Model.Municipalities),
                            new { @class = "pure-u-23-24" })
                        </div>

                        <div class="pure-u-1">
                            <label for="checkRES" class="pure-checkbox">
                                <input id="checkRES" type="checkbox"> двойно гражданство
                            </label>
                        </div>
                        <div class="pure-u-1">
                            @Html.LabelFor(m => m.ADDRESS_ID)
                            @Html.TextBoxFor(
                            m => m.ADDRESS_ID,
                            new { @class = "pure-u-1" })
                        </div>
                    </div>
                    <br />
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">Адрес по местоживеене</h3>
                        </div>
                        <div class="pure-g pure-u-1 pure-u-sm-2-3">
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.RESIDENCE)
                                @Html.TextBoxFor(
                            m => m.RESIDENCE,
                            new { @class = "pure-u-23-24" })
                            </div>
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.STREET)
                                @Html.TextBoxFor(
                            m => m.STREET,
                            new { @class = "pure-u-23-24" })
                            </div>
                        </div>
                        <div class="pure-g pure-u-1 pure-u-sm-1-3">
                            <div class="pure-u-1 pure-u-7-24">
                                @Html.LabelFor(m => m.STRNUM)
                                @Html.TextBoxFor(
                            m => m.STRNUM,
                            new { @class = "pure-u-23-24" })
                            </div>
                            <div class="pure-u-1 pure-u-7-24">
                                @Html.LabelFor(m => m.FLOOR1)
                                @Html.TextBoxFor(
                            m => m.FLOOR1,
                            new { @class = "pure-u-23-24" })
                            </div>
                            <div class="pure-u-1 pure-u-7-24">
                                @Html.LabelFor(m => m.FLAT)
                                @Html.TextBoxFor(
                            m => m.FLAT,
                            new { @class = "pure-u-23-24" })
                            </div>
                        </div>
                        <div class="pure-g pure-u-1 pure-u-sm-2-3">
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.COUNTRY1)
                                @Html.DropDownListFor(
                            m => m.COUNTRY1,
                            new SelectList(Model.Countries),
                            new { @class = "pure-u-23-24" })
                            </div>
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.TOWN1)
                                @Html.DropDownListFor(
                            m => m.TOWN1,
                            new SelectList(Model.Cities),
                            new { @class = "pure-u-23-24" })
                            </div>
                        </div>
                        <div class="pure-g pure-u-1 pure-u-sm-2-3">
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.COUNTRY2)
                                @Html.DropDownListFor(
                            m => m.COUNTRY2,
                            new SelectList(Model.Countries),
                            new { @class = "pure-u-23-24" })
                            </div>
                            <div class="pure-u-1 pure-u-md-11-24">
                                @Html.LabelFor(m => m.TOWN2)
                                @Html.DropDownListFor(
                            m => m.TOWN2,
                            new SelectList(Model.Cities),
                            new { @class = "pure-u-23-24" })
                            </div>
                        </div>
                    </div>
                </div>
                <h3>пълномощници</h3>
                <div class="pure-form-stacked">
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <a href="#" class="pure-button pure-button-active" id="find-rep-1">избор на пълномощник 1</a>
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            @Html.LabelFor(m => m.AUTHORISED_NAME)
                            @Html.TextBoxFor(m => m.AUTHORISED_NAME, new { @class = "pure-u-23-24" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            <label for="txtpulnomnm1">име на пълномощник 1</label>
                            <input type="text" name="txtpulnomnm1" id="txtpulnomnm1" value="" class="pure-u-1" />
                        </div>
                    </div>
                    <br />
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <a href="#" class="pure-button pure-button-active" id="find-rep-2">избор на пълномощник 2</a>
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            @Html.LabelFor(m => m.AUTHORISED_NAME2)
                            @Html.TextBoxFor(m => m.AUTHORISED_NAME2, new { @class = "pure-u-23-24" })
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            <label for="txtpulnomnm2">име на пълномощник 2</label>
                            <input type="text" name="txtpulnomnm2" id="txtpulnomnm2" value="" class="pure-u-1" />
                        </div>
                    </div>
                </div>
                <h3>банкови сметки</h3>
                <div class="pure-form-stacked">
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">банкова сметка 1</h3>
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.IBAN1)
                            @Html.TextBoxFor(m => m.IBAN1, new { @class = "pure-u-1 pure-u-md-23-24" })
                            @Html.ValidationMessageFor(x => x.IBAN1)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-6">
                            @Html.LabelFor(m => m.BIC1)
                            @Html.TextBoxFor(m => m.BIC1, new { @class = "pure-u-1 pure-u-md-11-12" })
                            @Html.ValidationMessageFor(x => x.BIC1)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            @Html.LabelFor(m => m.BANK1)
                            @Html.DropDownListFor(
                                m => m.BANK1,
                                new SelectList(Model.Banks),
                                new { @class = "pure-u-1" })
                        </div>
                    </div>
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">банкова сметка 2</h3>
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.IBAN2)
                            @Html.TextBoxFor(m => m.IBAN2, new { @class = "pure-u-1 pure-u-md-23-24" })
                            @Html.ValidationMessageFor(x => x.IBAN2)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-6">
                            @Html.LabelFor(m => m.BIC2)
                            @Html.TextBoxFor(m => m.BIC2, new { @class = "pure-u-1 pure-u-md-11-12" })
                            @Html.ValidationMessageFor(x => x.BIC2)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            @Html.LabelFor(m => m.BANK2)
                            @Html.DropDownListFor(
                                m => m.BANK2,
                                new SelectList(Model.Banks),
                                new { @class = "pure-u-1" })
                        </div>
                    </div>
                    <div class="pure-g">
                        <div class="pure-u-1">
                            <h3 class="form-heading">банкова сметка 3</h3>
                        </div>
                        <div class="pure-u-1 pure-u-md-1-3">
                            @Html.LabelFor(m => m.IBAN3)
                            @Html.TextBoxFor(m => m.IBAN3, new { @class = "pure-u-1 pure-u-md-23-24" })
                            @Html.ValidationMessageFor(x => x.IBAN3)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-6">
                            @Html.LabelFor(m => m.BIC3)
                            @Html.TextBoxFor(m => m.BIC3, new { @class = "pure-u-1 pure-u-md-11-12" })
                            @Html.ValidationMessageFor(x => x.BIC3)
                        </div>
                        <div class="pure-u-1 pure-u-md-1-2">
                            @Html.LabelFor(m => m.BANK3)
                            @Html.DropDownListFor(
                                m => m.BANK3,
                                new SelectList(Model.Banks),
                                new { @class = "pure-u-1" })
                        </div>
                    </div>
                </div>
                <h3>допълнителни данни</h3>
                <div class="pure-form-aligned">
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.E_MAIL)
                        @Html.TextBoxFor(m => m.E_MAIL, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.TEL_FIXED)
                        @Html.TextBoxFor(m => m.TEL_FIXED, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.TEL_MOBILE)
                        @Html.TextBoxFor(m => m.TEL_MOBILE, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.CD_GLOBID)
                        @Html.TextBoxFor(m => m.CD_GLOBID, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.CD_BIC)
                        @Html.TextBoxFor(m => m.CD_BIC, new { @class = "pure-u-md-1-2" })
                    </div>
                </div>
                <h3>данни пълномощник</h3>
                <div class="pure-form-aligned">
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.AUTHORISED_TYPE)
                        @Html.DropDownListFor(
                       m => m.AUTHORISED_TYPE,
                       new SelectList(GlobalConstants.RepresType),
                       new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.AUTHORISED_DOC)
                        @Html.TextBoxFor(m => m.AUTHORISED_DOC, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.AUTH_NOTARY)
                        @Html.TextBoxFor(m => m.AUTH_NOTARY, new { @class = "pure-u-md-1-2" })
                    </div>
                    <div class="pure-control-group">
                        @Html.LabelFor(m => m.AUTHORISED_DATE)
                        @Html.TextBoxFor(m => m.AUTHORISED_DATE, new { @class = "pure-u-md-1-2 datepicker" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="dialog-form" title="Изберете пълномощник">
        <h4>Използвайте един или повече от критериите за търсене и изберете един от резултатите</h4>
        <div class="pure-g">
            <div class="pure-u-md-3-4">
                <div class="pure-form pure-form-aligned">
                    <div class="pure-control-group">
                        @Html.Label("клиентски номер", new { @for = "txtID" })
                        @Html.TextBox("txtID", "", new { @class = "pure-u-5-8" })
                    </div>
                    <div class="pure-control-group">
                        @Html.Label("ЕГН / булстат", new { @for = "txtEGN" })
                        @Html.TextBox("txtEGN", "", new { @class = "pure-u-5-8" })
                    </div>
                    <div class="pure-control-group">
                        @Html.Label("наименование", new { @for = "txtName" })
                        @Html.TextBox("txtName", "", new { @class = "pure-u-5-8" })
                    </div>
                    <div class="pure-control-group">
                        @Html.Label("страна", new { @for = "cmbCountry" })
                        @Html.DropDownList("cmbCountry", new SelectList(Model.Countries), new { @class = "pure-u-5-8" })
                    </div>
                    <div class="pure-control-group">
                        @Html.Label("град", new { @for = "cmbTown" })
                        @Html.DropDownList("cmbTown", new SelectList(Model.Cities), new { @class = "pure-u-5-8" })
                    </div>
                </div>
            </div>
            <div class="pure-u-md-1-4">
                <div>
                    <button class="pure-button pure-button-active" id="rep-search" style="width:150px"><i class="fa fa-search"></i> търси</button>
                </div>
                <br />
                <div>
                    <button class="pure-button pure-button-active" id="rep-clean" style="width:150px"><i class="fa fa-remove"></i> изчисти</button>
                </div>
                <div>
                    <br />
                    <p class="text-danger" id="search-error"></p>
                </div>
            </div>
            <div class="rep-results pure-u-1">
                <table class="simple-table">
                    <tr>
                        <th>№</th>
                        <th>ЕГН / булстат</th>
                        <th>идентификатор</th>
                        <th>име</th>
                        <th>държава</th>
                        <th>град</th>
                    </tr>
                    <tr class="rep-row">
                        <td><button class="pure-button pure-button-primary selected-rep-number"></button></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            // side menu item hilight
            $('[href*=register]').closest('.menu-item').addClass('selected');

            // form accordeon settings
            $("#accordion").accordion({
                collapsible: true
            });

            // check for person type and hide fields
            var active = 0;
            var personType = $("select[name=TYPE_PERSON]");
            addBaseCountry();

            function addBaseCountry() {
                $("#COUNTRY_ADDRESS_ID").val("@GlobalConstants.BaseCountry").prop('disabled', 'disabled');
                $("#COUNTRY1").val("@GlobalConstants.BaseCountry").prop('disabled', 'disabled');
                $("#COUNTRY2").val("@GlobalConstants.BaseCountry").prop('disabled', 'disabled');
            }

            personType.change(function () {
                if ($("select[name=TYPE_PERSON] option:selected").text().indexOf("физическо") >= 0) {
                    $("#accordion").accordion("option", "active", 0);
                } else {
                    $("#accordion").accordion("option", "active", 1);
                }

                if ($("select[name=TYPE_PERSON] option:selected").text().indexOf("българско") >= 0) {
                    addBaseCountry();
                } else {
                    $("#COUNTRY_ADDRESS_ID").prop('disabled', false);
                    $("#COUNTRY1").prop('disabled', false);
                    $("#COUNTRY2").prop('disabled', false);
                }
            });

            // date picker settings
            $(".datepicker").datepicker({
                changeMonth: true,
                changeYear: true,
                dateFormat: "dd/mm/yy",
                defaultDate: 0
            });

            // representative modal
            var repRow = $(".rep-row").hide(); // hidden if no data available

            var dialog = $("#dialog-form").dialog({
                autoOpen: false,
                height: 500,
                width: 750,
            });

            $("#find-rep-1").click(function () {
                dialog.dialog("open");
                populateData(1);
            });

            $("#find-rep-2").click(function () {
                dialog.dialog("open");
                populateData(2);
            });

            // add data to representative search based on representative select button
            function populateData(n) {
                var clientNum = $("input[name=txtID]");
                var clientEgn = $("input[name=txtEGN]");
                var clientName = $("input[name=txtName]");
                var clientCountry;
                var clientCity;

                function cleanModal() {
                    clientNum.val("");
                    clientEgn.val("");
                    clientName.val("");

                    function createBlank() {
                        $("select[name=cmbCountry]").prepend("<option value='' class='blank-option' selected='selected'></option>");
                        $("select[name=cmbTown]").prepend("<option value='' class='blank-option' selected='selected'></option>");
                    }

                    var blanks = $(".blank-option");

                    if (blanks.length > 0) {
                        Promise.resolve(blanks.remove())
                        .then(createBlank());
                    } else {
                        createBlank();
                    }

                    var oldRows = $(".rep-data-row")
                    if (oldRows) {
                        oldRows.remove();
                    }
                }

                cleanModal();

                $("#rep-clean").click(function () {
                    cleanModal();
                });

                $("#rep-search").click(function () {
                    $.ajax({
                        method: "GET",
                        url: "@Url.Action("Representatives", "Client", new { Area = "FrontOffice"})",
                        data: {},
                        contentType: "application/json; charset=utf-8",
                        success: function (res) {
                            if (res.length <= 0)
                            {
                                return;
                            }

                            var oldRows = $(".rep-data-row")
                            if (oldRows) {
                                oldRows.remove();
                            }

                            clientNum = $("input[name=txtID]");
                            clientEgn = $("input[name=txtEGN]");
                            clientName = $("input[name=txtName]");
                            clientCountry = $("select[name=cmbCountry] option:selected");
                            clientCity = $("select[name=cmbTown] option:selected");

                            var result = [];
                            var filter = {};

                            var num = clientNum.val(),
                                egn = clientEgn.val(),
                                name = clientName.val(),
                                coun = clientCountry.text(),
                                city = clientCity.text();

                            if (num != "" && num != undefined) {
                                filter.CLIENTID_STRING = num;
                            }

                            if (egn != "" && egn != undefined) {
                                filter.PERSONALID_BULSTAT = egn;
                            }

                            if (name != "" && name != undefined) {
                                filter.FULL_NAME = name;
                            }

                            if (coun != "" && coun != undefined) {
                                filter.COUNTRY_ADDRESS_ID = coun;
                            }

                            if (city != "" && city != undefined) {
                                filter.TOWN_ADDRESS_ID = city;
                            }

                            if (Object.keys(filter).length <= 0) {
                                result = res;
                            } else {
                                for (i = 0; i < res.length; i++) {
                                    var found = true;
                                    for (var prop in filter) {
                                        if (!res[i].hasOwnProperty(prop) || res[i][prop].trim().toLowerCase() != filter[prop].trim().toLowerCase()) {
                                            found = false;
                                        }
                                    }
                                    if (found) {
                                        result.push(res[i]);
                                    }
                                }
                            }

                            if (result.length <= 0) {
                                $("#search-error").html("Няма намерени записи!");
                            } else {
                                $("#search-error").html("");

                                for (k = 1; k <= result.length; k++) {
                                    var row = $(".rep-row").first().clone();
                                    var tds = row.find("td");

                                    var btn = $(tds[0]).find("button");

                                    btn.html("" + k);
                                    $(tds[1]).html(result[k-1].PERSONALID_BULSTAT || "няма");
                                    $(tds[2]).html(result[k-1].CLIENTID_STRING || "няма");
                                    $(tds[3]).html(result[k-1].FULL_NAME || "няма");
                                    $(tds[4]).html(result[k-1].COUNTRY_ADDRESS_ID || "няма");
                                    $(tds[5]).html(result[k-1].TOWN_ADDRESS_ID || "няма");

                                    row.show()
                                        .removeClass("rep-row")
                                        .addClass("rep-data-row")
                                        .appendTo($(".simple-table"));
                                }

                                $(".selected-rep-number").click(function (ev) {
                                    var parent = $(ev.target).parent().parent("");
                                    dialog.dialog("close");
                                    var sufix = n == 1 ? "" : n;
                                    var inputName = $("#AUTHORISED_NAME" + sufix);
                                    var inputTxt = $("#txtpulnomnm" + n);

                                    console.log(parent.find(inputName));
                                    console.log(parent.find(inputTxt));

                                    inputName.val(parent.find("td")[2].innerText);
                                    inputTxt.val(parent.find("td")[3].innerText);
                                });
                            }
                        },
                        error: function (err) {
                            console.log("error:", err);
                        }
                    });
                });
            }

            // initial search if client is registered
            $("#id-bulstat").change(function (e) {
                var clientId = e.target.value;

                $.ajax({
                    method: "GET",
                    url: "@Url.Action("AllClientIds", "Client", new { Area = "FrontOffice"})",
                    data: {},
                    contentType: "application/json; charset=utf-8",
                    success: function (res) {
                        if (res.indexOf(clientId) >= 0) {
                            $("#client-notfound").html("");
                            $("#client-exists").html("Клиентът вече съществува и не може да бъде създаден!");
                            $("#reg-client").prop("disabled", true);
                        } else {
                            $("#reg-client").prop("disabled", false);
                            $("#client-exists").html("");
                        }

                        if (clientId.length >= 9 && clientId.length <= 13) {
                            $("#client-notfound").html("Клиентът може да бъде създаден!");
                            $("#reg-client").prop("disabled", false);
                        } else {
                            $("#client-notfound").html("");
                            $("#reg-client").prop("disabled", true);
                        }
                    },
                    error: function (err) {
                        console.log("error:", err);
                    }
                })
            })
        });
    </script>
}